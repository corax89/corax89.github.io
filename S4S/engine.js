// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
const canvas = document.getElementById("cnv");
const ctx = canvas.getContext("2d");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∏
ctx.fillStyle = "rgb(0 0 0)";
ctx.fillRect(0, 0, 1280, 720);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var image_array = [];
var game_helper_timers = [];
var gravitation = 0;
var draw_bounding_box = false;
var debugShowExpandedObjectsBorder = true;
let gamepads = {};
var inputState = {};
var local = {};
var Draw = {};
var Game = {
    allObject: [],
    screenx: 0,
    screeny: 0,
    gravitation: 0,
    // –§–ª–∞–≥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–æ–¥–æ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
    enableDrawing: false,
    enableTouchInput: false,
	helper:{}
};

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç Game
Game.init = function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for (let i = 0; i < 1024; i++) {
        image_array[i] = 0;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
    inputState = {
        keys: {},
        pressKeys: {},
        mouseButtons: {},
        axes: [],
        // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Å–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫
        touchButtons: {}
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    document.addEventListener('keydown', (e) => {
        if (!inputState.keys[e.code]) {
            inputState.pressKeys[e.code] = true;
        }
        inputState.keys[e.code] = true;
    });

    document.addEventListener('keyup', (e) => {
        inputState.keys[e.code] = false;
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Å–∞–Ω–∏—è/–∫–ª–∏–∫–∞
    function getPosition(event) {
		const rect = canvas.getBoundingClientRect();
		const scaleX = 1280 / rect.width;    // –ú–∞—Å—à—Ç–∞–± –ø–æ X (–ª–æ–≥–∏—á–µ—Å–∫–∏–π/—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π)
		const scaleY = 720 / rect.height;   // –ú–∞—Å—à—Ç–∞–± –ø–æ Y (–ª–æ–≥–∏—á–µ—Å–∫–∏–π/—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π)
		
		let clientX, clientY;
		
		// –î–ª—è —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
		if (event.clientX !== undefined) {
			clientX = event.clientX - rect.left;
			clientY = event.clientY - rect.top;
		}
		// –î–ª—è —Å–æ–±—ã—Ç–∏–π –∫–∞—Å–∞–Ω–∏—è
		else if (event.touches && event.touches[0]) {
			clientX = event.touches[0].clientX - rect.left;
			clientY = event.touches[0].clientY - rect.top;
		} else {
			return null;
		}
		
		// –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É —Ä–∞–∑–º–µ—Ä—É 1280x720
		return {
			x: clientX * scaleX,
			y: clientY * scaleY
		};
	}

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Å–∞–Ω–∏–π/–∫–ª–∏–∫–æ–≤
    function handleInteraction(event) {
       event.preventDefault();
        const pos = getPosition(event);
        if (pos) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–±—ã—á–Ω–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è
            if (!Game.helper.isTouchOnGamepad(pos.x, pos.y)) {
                Game.getTouch.istouch = 1;
                Game.getTouch.x = pos.x;
                Game.getTouch.y = pos.y;
            }
        }
    }

    function handleMove(event) {
         event.preventDefault();
        const pos = getPosition(event);
        if (pos && Game.getTouch.istouch) {
            Game.getTouch.x = pos.x;
            Game.getTouch.y = pos.y;
        }
    }

    function handleEnd(event) {
        event.preventDefault();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        const pos = getPosition(event);
        if (pos) {
            checkTouchButtons(pos.x, pos.y, false);
        }
        Game.getTouch.istouch = 0;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    canvas.addEventListener('mousedown', handleInteraction);
    canvas.addEventListener('mousemove', handleMove);
    canvas.addEventListener('mouseup', handleEnd);
    canvas.addEventListener('mouseleave', handleEnd);
    canvas.addEventListener('touchstart', handleInteraction);
    canvas.addEventListener('touchmove', handleInteraction);
    canvas.addEventListener('touchend', handleEnd);
    canvas.addEventListener('touchcancel', handleEnd);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–π–º–ø–∞–¥–∞
    window.addEventListener('gamepadconnected', (event) => {
        console.log('‚úÖ üéÆ A gamepad was connected:', event.gamepad);
    });

    window.addEventListener('gamepaddisconnected', (event) => {
        console.log('‚ùå üéÆ A gamepad was disconnected:', event.gamepad);
    });
    
    // –ö–ª–∞—Å—Å Vector2 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 2D –≤–µ–∫—Ç–æ—Ä–∞–º–∏
    class Vector2 {
		constructor(x, y) {
			this.x = x;
			this.y = y;
		}
		
		static rotate(v, angle, result = new Vector2(0, 0)) {
			const cos_a = Math.cos(angle);
			const sin_a = Math.sin(angle);
			const x = v.x * cos_a - v.y * sin_a;
			const y = v.x * sin_a + v.y * cos_a;
			result.x = x;
			result.y = y;
			return result;
		}
		
		normalize() {
			const len_sq = this.x * this.x + this.y * this.y;
			if (len_sq > 0) {
				const inv_len = 1 / Math.sqrt(len_sq);
				this.x *= inv_len;
				this.y *= inv_len;
			}
			return this;
		}
		
		static dot(v1, v2) {
			return v1.x * v2.x + v1.y * v2.y;
		}
	}

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏ –∏ –∫–æ–ª–ª–∏–∑–∏—è–º–∏
    function getPolygonAxes(points) {
        const axes = [];
        for (let i = 0; i < points.length; i++) {
            const p1 = points[i];
            const p2 = points[(i + 1) % points.length];
            const edge = new Vector2(p2.x - p1.x, p2.y - p1.y);
            const normal = new Vector2(-edge.y, edge.x).normalize();
            axes.push(normal);
        }
        return axes;
    }

    function projectPolygon(axis, points) {
        let min = Vector2.dot(axis, points[0]);
        let max = min;
        
        for (let i = 1; i < points.length; i++) {
            const projection = Vector2.dot(axis, points[i]);
            if (projection < min) min = projection;
            if (projection > max) max = projection;
        }
        
        return { min, max };
    }

    // –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π
    Game.checkCollision = function(a, b) {
        const angle_a = a.angle * Math.PI / 180;
        const angle_b = b.angle * Math.PI / 180;
        
        const center_a = new Vector2(a.x + a.width/2, a.y + a.height/2);
        const center_b = new Vector2(b.x + b.width/2, b.y + b.height/2);
        
        const half_size_a = new Vector2(a.width/2, a.height/2);
        const half_size_b = new Vector2(b.width/2, b.height/2);
        
        const a_points = [
            new Vector2(-half_size_a.x, -half_size_a.y),
            new Vector2( half_size_a.x, -half_size_a.y),
            new Vector2( half_size_a.x,  half_size_a.y),
            new Vector2(-half_size_a.x,  half_size_a.y)
        ];
        
        const b_points = [
            new Vector2(-half_size_b.x, -half_size_b.y),
            new Vector2( half_size_b.x, -half_size_b.y),
            new Vector2( half_size_b.x,  half_size_b.y),
            new Vector2(-half_size_b.x,  half_size_b.y)
        ];
        
        // –ü–æ–≤–æ—Ä–æ—Ç –∏ —Å–º–µ—â–µ–Ω–∏–µ —Ç–æ—á–µ–∫
        for (let i = 0; i < 4; i++) {
            a_points[i] = Vector2.rotate(a_points[i], angle_a);
            a_points[i].x += center_a.x;
            a_points[i].y += center_a.y;
            
            b_points[i] = Vector2.rotate(b_points[i], angle_b);
            b_points[i].x += center_b.x;
            b_points[i].y += center_b.y;
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–µ–π –¥–ª—è SAT
        const axes = [
            ...getPolygonAxes(a_points),
            ...getPolygonAxes(b_points)
        ];
        
        let minOverlap = Infinity;
        let smallestAxis = new Vector2(0, 0);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –ø–æ –æ—Å—è–º
        for (const axis of axes) {
            const projA = projectPolygon(axis, a_points);
            const projB = projectPolygon(axis, b_points);
            
            if (projA.max < projB.min || projB.max < projA.min) {
                return { collides: false };
            }
            
            const overlap = Math.min(projA.max, projB.max) - Math.max(projA.min, projB.min);
            
            if (overlap < minOverlap) {
                minOverlap = overlap;
                smallestAxis = axis;
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏
        const centerDiff = new Vector2(center_b.x - center_a.x, center_b.y - center_a.y);
        if (Vector2.dot(centerDiff, smallestAxis) < 0) {
            smallestAxis = new Vector2(-smallestAxis.x, -smallestAxis.y);
        }
        
        return {
            collides: true,
            normal: smallestAxis,
            overlap: minOverlap
        };
    };

    Game.addObjectsFromArray = function(objectsArray) {
      for (var arrIndex = 0; arrIndex < objectsArray.length; arrIndex++) {
        var obj = objectsArray[arrIndex];
        var xyArray = obj.xy;
        var objectRef = obj.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º id
        if (!objectRef) {
          console.error('Object with id "' + objectRef + '" not found in window scope');
          continue;  // –≤–º–µ—Å—Ç–æ return, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ü–∏–∫–ª
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ xyArray —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏ –∏–º–µ–µ—Ç —á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (!Array.isArray(xyArray)) {
          console.error('xy property for object "' + objectRef + '" is not an array');
          continue;
        }
        
        if (xyArray.length % 2 !== 0) {
          console.error('xy array for object "' + objectRef + '" has odd number of elements');
          continue;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
        for (var i = 0; i < xyArray.length; i += 2) {
          var x = xyArray[i];
          var y = xyArray[i + 1];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
          if (typeof x !== 'number' || typeof y !== 'number') {
            console.error('Invalid coordinates at position ' + i + ' for object "' + objectRef + '"');
            continue;
          }
          
          // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ addObject —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
          var o = Game.addObject(
            objectRef.name,x,y,0,0,0
          );
		  for (var key in objectRef) {
			  if (objectRef.hasOwnProperty(key)) {
				o[key] = objectRef[key];
			  }
			}
			o.x = x;
			o.y = y;
        }
      }
    };

    Game.resolveCollision = function(a, b, collisionInfo) {
        if (a.isStatic && b.isStatic) return;
        
        const { normal, overlap } = collisionInfo;

        if (normal.y > 0.5) {
            a.isOnGround = 1;
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏
        const correction = new Vector2(
            normal.x * overlap,
            normal.y * overlap
        );
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ –º–∞—Å—Å–∞–º
        const totalMass = a.isStatic ? b.mass : (b.isStatic ? a.mass : a.mass + b.mass);
        const aRatio = b.isStatic ? 1 : (a.isStatic ? 0 : b.mass / totalMass);
        const bRatio = a.isStatic ? 1 : (b.isStatic ? 0 : a.mass / totalMass);
        
        if (!a.isStatic) {
            a.x -= correction.x * aRatio;
            a.y -= correction.y * aRatio;
        }
        
        if (!b.isStatic) {
            b.x += correction.x * bRatio;
            b.y += correction.y * bRatio;
        }
        
        // –†–∞—Å—á–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        const relativeVelocity = new Vector2(
            b.speedx - a.speedx,
            b.speedy - a.speedy
        );
        
        // –°–∫–æ—Ä–æ—Å—Ç—å –≤–¥–æ–ª—å –Ω–æ—Ä–º–∞–ª–∏
        const velocityAlongNormal = Vector2.dot(relativeVelocity, normal);
        
        if (velocityAlongNormal > 0) return;
        
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–ø—Ä—É–≥–æ—Å—Ç–∏
        const restitution = Math.min(a.restitution, b.restitution);
        
        // –ò–º–ø—É–ª—å—Å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
        let j = -(1 + restitution) * velocityAlongNormal;
        j /= (a.isStatic ? 0 : 1/a.mass) + (b.isStatic ? 0 : 1/b.mass);
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞
        const impulse = new Vector2(normal.x * j, normal.y * j);
        
        if (!a.isStatic) {
            a.speedx -= impulse.x / a.mass;
            a.speedy -= impulse.y / a.mass;
        }
        
        if (!b.isStatic) {
            b.speedx += impulse.x / b.mass;
            b.speedy += impulse.y / b.mass;
        }
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
function checkTouchButtons(x, y, isPressed) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    if (!Game.enableTouchInput) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    for (const btnId in inputState.touchButtons) {
        const btn = inputState.touchButtons[btnId];
        if (x >= btn.x && x <= btn.x + btn.width &&
            y >= btn.y && y <= btn.y + btn.height) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            btn.isPressed = isPressed;
            inputState.keys[btn.keyCode] = isPressed;
            if (isPressed) {
                inputState.pressKeys[btn.keyCode] = true;
            }
            return true; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –±—ã–ª–æ –Ω–∞ –∫–Ω–æ–ø–∫—É
        }
    }
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏
Game.addTouchButton = function(id, x, y, width, height, keyCode) {
    inputState.touchButtons[id] = {
        x: x,
        y: y,
        width: width,
        height: height,
        keyCode: keyCode,
        isPressed: false
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏
Game.removeTouchButton = function(id) {
    if (inputState.touchButtons[id]) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        if (inputState.touchButtons[id].isPressed) {
            inputState.keys[inputState.touchButtons[id].keyCode] = false;
        }
        delete inputState.touchButtons[id];
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
Draw.loadImage = function(n, str) {
    if(n < 1024){
        let img = new Image();
        img.src = str;
        image_array[n] = 1;
        img.onload = function() {
            image_array[n] = img;
        };
        return n;
    }
    return 0;
};

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
Draw.text = function(x, y, size, colour, str) {
    ctx.fillStyle = colour;
    ctx.textBaseline = "top";
    ctx.font = size + "px serif";
    ctx.fillText(str, x - Game.screenx, y - Game.screeny);
};

Draw.plot = function(x, y, colour) {
    ctx.fillStyle = colour;
    ctx.fillRect(x - Game.screenx, y - Game.screeny, 1, 1);
};

Draw.line = function(x, y, x1, y1, color) {
    ctx.strokeStyle = color;
    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x1, y1);
    ctx.stroke();
};

Draw.sprite = function(sprite, x, y, size, colour) {
    ctx.fillStyle = colour;
    if (size && size < 1) {
        size = 1;
    }
    for (let i = 0; i < sprite.length; i++) {
        for (let j = 0; j < sprite[i].length; j++) {
            if (sprite[i][j] != 0) {
                ctx.fillRect(x + j * size - Game.screenx, y + i * size - Game.screeny, size, size);
            }
        }
    }
};

Draw.image = function(n, x, y, width, height) {
    let img = image_array[n];
    if (img != 1 && img != 0) {
        ctx.drawImage(img, x, y, width, height);
    }
};

Draw.clear_screen = function(color) {
    ctx.fillStyle = color;
    ctx.fillRect(0, 0, 1280, 720);
};

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å–∞–Ω–∏—è–º–∏
Game.getTouch = {istouch: 0, x: 0, y: 0};

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
Game.setGravity = function(v) {
    gravitation = v;
};

Game.collision = function g_collision(x1, y1, width1, height1, x2, y2, width2, height2) {
    return (Math.max(x1, x2) <= Math.min(x1 + width1, x2 + width2) && 
           (Math.max(y1, y2) <= Math.min(y1 + height1, y2 + height2)));
};

Game.getKey = function(key) {
    return !!inputState.keys[key];
};

Game.getKeyPress = function(key) {
    return !!inputState.pressKeys[key];
};

Game.getAxes = function(n) {
    return inputState.axes ? inputState.axes[n] : 0;
};

Game.setScreenX = function(x) {
    Game.screenx = x;
};

Game.setScreenY = function(y) {
    Game.screeny = y;
};

Game.setTimeout = function(callback, delayMs) {
    var targetTime = Date.now() + delayMs;
    game_helper_timers.push({ callback, targetTime });
};

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
Game.addObject = function(name, x, y, width, height, sprite) {
    var obj = {
        name: name,
        x: x,
        y: y,
        width: width,
        height: height,
        sprite: sprite,
        speedx: 0,
        speedy: 0,
        onCollision: function(){},
        onStep: function(){},
        visible: 1,
        solid: 1,
        angle: 0,
        flip: 0,
        mass: 1,
        restitution: 0.5,
        isStatic: 0,
        isOnGround: 0,
        zIndex: 0,
        local: {}
    };
    Game.allObject.push(obj);
    return obj;
};

Game.removeObject = function(obj) {
    function findObjectIndex(arr, obj) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === obj) {
                return i;
            }
        }
        return -1;
    }
    const index = findObjectIndex(Game.allObject, obj);
    if (index !== -1) {
        Game.allObject.splice(index, 1);
    }
};

Game.mirrorObject = function(o) {
    var no = JSON.parse(JSON.stringify(o));
    no.onCollision = o.onCollision;
    no.onStep = o.onStep;
    Game.allObject.push(no);
    return no;
};

Game.setVelocityTowards = function(obj1, x, y, speed) {
    const dx = x - obj1.x;
    const dy = y - obj1.y;
    const distance = Math.sqrt(dx * dx + dy * dy);
    
    if (distance > 0) {
        obj1.speedx = (dx / distance) * speed;
        obj1.speedy = (dy / distance) * speed;
    } else {
        obj1.speedx = 0;
        obj1.speedy = 0;
    }
};

Game.exitScreen = function(o) {
    return ((o.x + o.width - Game.screenx < 0) || 
            (o.y + o.height - Game.screeny < 0) || 
            (o.x - Game.screenx > 1280) || 
            (o.y - Game.screeny > 720));
};

Game.distance = function(x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    return Math.sqrt(dx * dx + dy * dy);
};

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏
const globalAudioCtx = new (window.AudioContext || window.webkitAudioContext)();

// –û—á–µ—Ä–µ–¥—å –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–ª–æ–¥–∏–∏
const MAX_CONCURRENT_MELODIES = 8;
let activeMelodies = 0;
const melodyQueue = [];

Game.play_music = function(melodyString, bpm = 120) {
    // –ï—Å–ª–∏ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º, —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
    if (activeMelodies >= MAX_CONCURRENT_MELODIES) {
        melodyQueue.push({ melodyString, bpm });
        return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –º–µ–ª–æ–¥–∏—é
    activeMelodies++;
    Game._playMelody(melodyString, bpm);
};

// –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
Game._playMelody = function(melodyString, bpm) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)
    if (typeof melodyString !== 'string' || !/^(\d+,)*\d+$/.test(melodyString)) {
        console.error("Invalid melody string format");
        activeMelodies--;
        Game._checkQueue(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        return;
    }

    const steps = melodyString.split(',').map(Number);
    const totalSteps = steps.length;
    if (totalSteps === 0) {
        activeMelodies--;
        Game._checkQueue();
        return;
    }

    const instruments = [
        {name: 'C4', freq: 261.63, type: 'square'},
        {name: 'D4', freq: 293.66, type: 'square'},
        {name: 'E4', freq: 329.63, type: 'square'},
        {name: 'F4', freq: 349.23, type: 'square'},
        {name: 'G4', freq: 392.00, type: 'square'},
        {name: 'A4', freq: 440.00, type: 'square'},
        {name: 'B4', freq: 493.88, type: 'square'},
        {name: 'C5', freq: 523.25, type: 'square'},
        {name: 'Kick', type: 'drum', drumType: 'kick'},
        {name: 'Snare', type: 'drum', drumType: 'snare'},
        {name: 'HiHat', type: 'drum', drumType: 'hihat'},
        {name: 'Clap', type: 'drum', drumType: 'clap'},
        {name: 'Tom', type: 'drum', drumType: 'tom'}
    ];

    const stepDuration = 60 / bpm / 2;
    let currentTime = globalAudioCtx.currentTime + 0.1;

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ—Ç –∏ —É–¥–∞—Ä–Ω—ã—Ö (–∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)
    for (let step = 0; step < totalSteps; step++) {
        const stepValue = steps[step];
        
        for (let i = 0; i < instruments.length; i++) {
            if (stepValue & (1 << i)) {
                const instrument = instruments[i];
                
                if (instrument.type === 'drum') {
                    playDrum(instrument.drumType, currentTime);
                } else {
                    playNote(instrument.freq, currentTime, instrument.type);
                }
            }
        }
        
        currentTime += stepDuration;
    }

    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–π –º–µ–ª–æ–¥–∏–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
    const totalDuration = stepDuration * totalSteps;
    setTimeout(() => {
        activeMelodies--;
        Game._checkQueue(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –º–µ–ª–æ–¥–∏–π
    }, totalDuration * 1000 + 100);

    // –§—É–Ω–∫—Ü–∏–∏ playNote –∏ playDrum (—Å –æ—á–∏—Å—Ç–∫–æ–π!)
    function playNote(freq, startTime, waveType) {
        const oscillator = globalAudioCtx.createOscillator();
        const gainNode = globalAudioCtx.createGain();
        
        oscillator.type = waveType || 'square';
        oscillator.frequency.value = freq;
        
        gainNode.gain.setValueAtTime(0.1, startTime);
        gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + stepDuration * 0.9);
        
        oscillator.connect(gainNode);
        gainNode.connect(globalAudioCtx.destination);
        
        oscillator.start(startTime);
        oscillator.stop(startTime + stepDuration);

        // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        oscillator.onended = () => {
            oscillator.disconnect();
            gainNode.disconnect();
        };
    }

    function playDrum(type, startTime) {
        const bufferSource = globalAudioCtx.createBufferSource();
        const gainNode = globalAudioCtx.createGain();
        const duration = 0.2;
        
        const buffer = globalAudioCtx.createBuffer(1, globalAudioCtx.sampleRate * duration, globalAudioCtx.sampleRate);
        const data = buffer.getChannelData(0);
        
        switch(type) {
            case 'kick':
                for (let i = 0; i < data.length; i++) {
                    const t = i / globalAudioCtx.sampleRate;
                    data[i] = Math.sin(t * 50 * Math.PI * 2) * Math.exp(-t * 10);
                }
                break;
            case 'snare':
                for (let i = 0; i < data.length; i++) {
                    data[i] = (Math.random() * 2 - 1) * Math.exp(-i / (globalAudioCtx.sampleRate * 0.1));
                }
                break;
            case 'hihat':
                for (let i = 0; i < data.length; i++) {
                    data[i] = (Math.random() * 2 - 1) * Math.exp(-i / (globalAudioCtx.sampleRate * 0.02));
                }
                break;
            case 'clap':
                for (let i = 0; i < data.length; i++) {
                    const t = i / globalAudioCtx.sampleRate;
                    if (t < 0.02 || (t > 0.03 && t < 0.05) || (t > 0.06 && t < 0.08)) {
                        data[i] = (Math.random() * 2 - 1) * Math.exp(-t * 20);
                    }
                }
                break;
            case 'tom':
                for (let i = 0; i < data.length; i++) {
                    const t = i / globalAudioCtx.sampleRate;
                    data[i] = Math.sin(t * 100 * Math.PI * 2) * Math.exp(-t * 5);
                }
                break;
        }
        
        gainNode.gain.setValueAtTime(0.5, startTime);
        gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);
        
        bufferSource.buffer = buffer;
        bufferSource.connect(gainNode);
        gainNode.connect(globalAudioCtx.destination);
        
        bufferSource.start(startTime);
        bufferSource.stop(startTime + duration);

        // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        bufferSource.onended = () => {
            bufferSource.disconnect();
            gainNode.disconnect();
        };
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏ –∑–∞–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π –º–µ–ª–æ–¥–∏–∏
Game._checkQueue = function() {
    if (melodyQueue.length > 0 && activeMelodies < MAX_CONCURRENT_MELODIES) {
        const nextMelody = melodyQueue.shift();
        Game._playMelody(nextMelody.melodyString, nextMelody.bpm);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getApproximateMemoryUsage(obj) {
    const jsonString = JSON.stringify(obj);
    return jsonString.length * 2;
}

Game.getMemory = function() {
    return getApproximateMemoryUsage(Game.allObject) + 
           getApproximateMemoryUsage(image_array) + 
           (Blockly.JavaScript.workspaceToCode(workspace)?.length * 2 || 0);
};

function reset_game() {
    for (var i = 0; i < game_helper_timers.length; i++) {
        game_helper_timers.splice(i, 1);  
        i--;
    }
    for (var i = 0; i < Game.allObject.length; i++) {
        Game.allObject.splice(i, 1);  
        i--;
    }
    for (let i = 0; i < 1024; i++)
        image_array[i] = 0;
    Game.screenx = 0;
    Game.screeny = 0;
    Game.gravitation = 0;
}

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–µ–π–º–ø–∞–¥ (—Å—Ç–∏–ª—å Nintendo Switch)
Game.virtualGamepad = {
    buttons: [
        { id: 'KeyB', x: 1150, y: 500, r: 30, color: '#e61919', text: 'B', active: false }, // –ö—Ä–∞—Å–Ω—ã–π (–ø—Ä–∞–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è)
        { id: 'KeyA', x: 1200, y: 550, r: 30, color: '#2dcd2d', text: 'A', active: false }, // –ó–µ–ª–µ–Ω—ã–π (–ø—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è)
        { id: 'KeyY', x: 1100, y: 550, r: 30, color: '#f5f518', text: 'Y', active: false }, // –ñ–µ–ª—Ç—ã–π (–ª–µ–≤–∞—è –Ω–∏–∂–Ω—è—è)
        { id: 'KeyX', x: 1150, y: 600, r: 30, color: '#3a3aff', text: 'X', active: false }  // –°–∏–Ω–∏–π (–ª–µ–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è)
    ],
    dpad: {
        x: 100, y: 550, size: 100,
        buttons: [
            { id: 'ArrowUp', x: 0, y: -35, w: 30, h: 35, active: false },
            { id: 'ArrowDown', x: 0, y: 35, w: 30, h: 35, active: false },
            { id: 'ArrowLeft', x: -35, y: 0, w: 35, h: 30, active: false },
            { id: 'ArrowRight', x: 35, y: 0, w: 35, h: 30, active: false }
        ]
    },
    joystick: {
        x: 300, y: 550, r: 50,
        handle: { x: 0, y: 0, r: 25 },
        active: false, touchId: null
    },
    touches: {}
};

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
Game.updateSensorKey = function() {
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –≥–µ–π–º–ø–∞–¥–∞
    function drawGamepad() {
        if (!Game.enableDrawing || !Game.enableTouchInput) return;
        
        // –ö–Ω–æ–ø–∫–∏ ABXY (—Ä–∞—Å–∫–ª–∞–¥–∫–∞ Switch)
        Game.virtualGamepad.buttons.forEach(btn => {
            // –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥
            ctx.beginPath();
            ctx.arc(btn.x, btn.y, btn.r, 0, Math.PI * 2);
            ctx.fillStyle = btn.active ? '#fff' : btn.color;
            ctx.fill();
            
            // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥
            ctx.beginPath();
            ctx.arc(btn.x, btn.y, btn.r - 8, 0, Math.PI * 2);
            ctx.fillStyle = btn.active ? btn.color : '#fff';
            ctx.fill();
            
            // –ë—É–∫–≤–∞ –∫–Ω–æ–ø–∫–∏
            ctx.fillStyle = btn.active ? '#fff' : btn.color;
            ctx.font = 'bold 20px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(btn.text, btn.x, btn.y);
        });

        // D-Pad
        ctx.save();
        ctx.translate(Game.virtualGamepad.dpad.x, Game.virtualGamepad.dpad.y);
        
        // –¶–µ–Ω—Ç—Ä D-Pad
        ctx.beginPath();
        ctx.arc(0, 0, 15, 0, Math.PI * 2);
        ctx.fillStyle = Game.virtualGamepad.dpad.buttons.some(b => b.active) ? '#fff' : '#777';
        ctx.fill();
        
        // –ö–Ω–æ–ø–∫–∏ D-Pad
        Game.virtualGamepad.dpad.buttons.forEach(btn => {
            ctx.fillStyle = btn.active ? '#fff' : '#777';
            
            ctx.beginPath();
            ctx.lineTo(btn.x - btn.w/2, btn.y - btn.h/2);
            ctx.lineTo(btn.x + btn.w/2, btn.y - btn.h/2);
            ctx.lineTo(btn.x + btn.w/2, btn.y + btn.h/2);
            ctx.lineTo(btn.x - btn.w/2, btn.y + btn.h/2);
            ctx.closePath();
            ctx.fill();
            
            // –°—Ç—Ä–µ–ª–∫–∏
            ctx.fillStyle = btn.active ? '#000' : '#fff';
            ctx.font = '20px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            let arrow = '';
            if (btn.id === 'ArrowUp') arrow = '‚Üë';
            if (btn.id === 'ArrowDown') arrow = '‚Üì';
            if (btn.id === 'ArrowLeft') arrow = '‚Üê';
            if (btn.id === 'ArrowRight') arrow = '‚Üí';
            ctx.fillText(arrow, btn.x, btn.y);
        });
        ctx.restore();

        // –î–∂–æ–π—Å—Ç–∏–∫ (—Å—Ç–∏–ª—å Switch)
        ctx.beginPath();
        ctx.arc(Game.virtualGamepad.joystick.x, Game.virtualGamepad.joystick.y, Game.virtualGamepad.joystick.r, 0, Math.PI * 2);
        ctx.fillStyle = 'rgba(200, 200, 200, 0.5)';
        ctx.fill();
        ctx.strokeStyle = '#aaa';
        ctx.lineWidth = 2;
        ctx.stroke();
        
        // –†—É—á–∫–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞
        ctx.beginPath();
        ctx.arc(
            Game.virtualGamepad.joystick.x + Game.virtualGamepad.joystick.handle.x,
            Game.virtualGamepad.joystick.y + Game.virtualGamepad.joystick.handle.y,
            Game.virtualGamepad.joystick.handle.r, 0, Math.PI * 2
        );
        ctx.fillStyle = Game.virtualGamepad.joystick.active ? '#e60012' : '#e61919';
        ctx.fill();
        ctx.strokeStyle = '#c00';
        ctx.lineWidth = 2;
        ctx.stroke();
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    function drawTouchButtons() {
        if (!Game.enableDrawing || !Game.enableTouchInput) return;
        
        for (const btnId in inputState.touchButtons) {
            const btn = inputState.touchButtons[btnId];
            ctx.fillStyle = btn.isPressed ? '#4CAF50' : '#8BC34A';
            ctx.fillRect(btn.x, btn.y, btn.width, btn.height);
            
            ctx.fillStyle = '#fff';
            ctx.font = '16px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(btn.keyCode, btn.x + btn.width/2, btn.y + btn.height/2);
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–µ–π–º–ø–∞–¥–∞ –∏ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    drawGamepad();
    drawTouchButtons();
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
Game.initSensorInput = function() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É D-Pad
    function checkDPadHit(x, y, btn) {
        const centerX = Game.virtualGamepad.dpad.x;
        const centerY = Game.virtualGamepad.dpad.y;
        const btnX = centerX + btn.x;
        const btnY = centerY + btn.y;
        
        if (btn.id === 'ArrowUp') {
            return x >= btnX - btn.w/2 && x <= btnX + btn.w/2 && 
                   y <= btnY + btn.h/2 && y >= centerY - Game.virtualGamepad.dpad.size/2;
        }
        if (btn.id === 'ArrowDown') {
            return x >= btnX - btn.w/2 && x <= btnX + btn.w/2 && 
                   y >= btnY - btn.h/2 && y <= centerY + Game.virtualGamepad.dpad.size/2;
        }
        if (btn.id === 'ArrowLeft') {
            return y >= btnY - btn.h/2 && y <= btnY + btn.h/2 && 
                   x <= btnX + btn.w/2 && x >= centerX - Game.virtualGamepad.dpad.size/2;
        }
        if (btn.id === 'ArrowRight') {
            return y >= btnY - btn.h/2 && y <= btnY + btn.h/2 && 
                   x >= btnX - btn.w/2 && x <= centerX + Game.virtualGamepad.dpad.size/2;
        }
        return false;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    function updateButtonState(button, active) {
        if (button.active !== active) {
            button.active = active;
            inputState.pressKeys[button.id] = active && !inputState.keys[button.id] ? 1 : 0;
            inputState.keys[button.id] = active;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–∂–æ–π—Å—Ç–∏–∫–∞
    function updateJoystick(x, y) {
        let dx = x - Game.virtualGamepad.joystick.x;
        let dy = y - Game.virtualGamepad.joystick.y;
        
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance > Game.virtualGamepad.joystick.r) {
            dx = dx * Game.virtualGamepad.joystick.r / distance;
            dy = dy * Game.virtualGamepad.joystick.r / distance;
        }
        
        Game.virtualGamepad.joystick.handle.x = dx;
        Game.virtualGamepad.joystick.handle.y = dy;
        inputState.axes[0] = dx / Game.virtualGamepad.joystick.r;
        inputState.axes[1] = dy / Game.virtualGamepad.joystick.r;
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è canvas
    function getCanvasCoordinates(clientX, clientY) {
		if(!Game.enableTouchInput) return {x:0,y:0};
        const rect = canvas.getBoundingClientRect();
        const scaleX = canvas.width / rect.width;
        const scaleY = canvas.height / rect.height;
        return {
            x: (clientX - rect.left) * scaleX,
            y: (clientY - rect.top) * scaleY
        };
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–∞—Å–∞–Ω–∏—è
    function handleStart(x, y, id) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ ABXY
        for (const btn of Game.virtualGamepad.buttons) {
            if (Math.sqrt((x - btn.x) ** 2 + (y - btn.y) ** 2) <= btn.r) {
                updateButtonState(btn, true);
                Game.virtualGamepad.touches[id] = { type: 'button', button: btn };
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ D-Pad
        for (const btn of Game.virtualGamepad.dpad.buttons) {
            if (checkDPadHit(x, y, btn)) {
                updateButtonState(btn, true);
                Game.virtualGamepad.touches[id] = { type: 'dpad', button: btn };
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞
        if (Math.sqrt((x - Game.virtualGamepad.joystick.x) ** 2 + (y - Game.virtualGamepad.joystick.y) ** 2) <= Game.virtualGamepad.joystick.r) {
            Game.virtualGamepad.joystick.active = true;
            Game.virtualGamepad.joystick.touchId = id;
            updateJoystick(x, y);
            Game.virtualGamepad.touches[id] = { type: 'joystick' };
        }
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏
    canvas.addEventListener('mousedown', (e) => {
        const { x, y } = getCanvasCoordinates(e.clientX, e.clientY);
        handleStart(x, y, 'mouse');
    });

    canvas.addEventListener('mousemove', (e) => {
        if (Game.virtualGamepad.joystick.touchId === 'mouse') {
            const { x, y } = getCanvasCoordinates(e.clientX, e.clientY);
            updateJoystick(x, y);
        }
    });

    canvas.addEventListener('mouseup', () => {
        if (Game.virtualGamepad.touches['mouse']) {
            const touch = Game.virtualGamepad.touches['mouse'];
            if (touch.type === 'button' || touch.type === 'dpad') {
                updateButtonState(touch.button, false);
            } else if (touch.type === 'joystick') {
                Game.virtualGamepad.joystick.active = false;
                Game.virtualGamepad.joystick.touchId = null;
                Game.virtualGamepad.joystick.handle.x = 0;
                Game.virtualGamepad.joystick.handle.y = 0;
                inputState.axes[0] = 0;
                inputState.axes[1] = 0;
            }
            delete Game.virtualGamepad.touches['mouse'];
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Å–∞–Ω–∏–π
    canvas.addEventListener('touchstart', (e) => {
        e.preventDefault();
        Array.from(e.changedTouches).forEach(touch => {
            const { x, y } = getCanvasCoordinates(touch.clientX, touch.clientY);
            handleStart(x, y, touch.identifier);
        });
    });

    canvas.addEventListener('touchmove', (e) => {
        e.preventDefault();
        Array.from(e.changedTouches).forEach(touch => {
            if (Game.virtualGamepad.touches[touch.identifier]?.type === 'joystick') {
                const { x, y } = getCanvasCoordinates(touch.clientX, touch.clientY);
                updateJoystick(x, y);
            }
        });
    });

    canvas.addEventListener('touchend', (e) => {
        e.preventDefault();
        Array.from(e.changedTouches).forEach(touch => {
            if (Game.virtualGamepad.touches[touch.identifier]) {
                const touchData = Game.virtualGamepad.touches[touch.identifier];
                if (touchData.type === 'button' || touchData.type === 'dpad') {
                    updateButtonState(touchData.button, false);
                } else if (touchData.type === 'joystick') {
                    Game.virtualGamepad.joystick.active = false;
                    Game.virtualGamepad.joystick.touchId = null;
                    Game.virtualGamepad.joystick.handle.x = 0;
                    Game.virtualGamepad.joystick.handle.y = 0;
                    inputState.axes[0] = 0;
                    inputState.axes[1] = 0;
                }
                delete Game.virtualGamepad.touches[touch.identifier];
            }
        });
    });
	
	Game.helper.isTouchOnGamepad = function(x, y) {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ ABXY
		for (const btn of Game.virtualGamepad.buttons) {
			if (Math.sqrt((x - btn.x) ** 2 + (y - btn.y) ** 2) <= btn.r) {
				return true;
			}
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ D-Pad
		for (const btn of Game.virtualGamepad.dpad.buttons) {
			if (checkDPadHit(x, y, btn)) {
				return true;
			}
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞
		if (Math.sqrt((x - Game.virtualGamepad.joystick.x) ** 2 + (y - Game.virtualGamepad.joystick.y) ** 2) <= Game.virtualGamepad.joystick.r) {
			return true;
		}

		return false;
	}
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
Game.initSensorInput();

Game.updateGamepadKey = function(){
    const gamepads = navigator.getGamepads();
    if (gamepads[0]) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–µ–π–º–ø–∞–¥–∞
        inputState.pressKeys['KeyA'] = !inputState.keys['KeyA'] && gamepads[0].buttons[1].pressed ? 1 : 0;
        inputState.pressKeys['KeyB'] = !inputState.keys['KeyB'] && gamepads[0].buttons[0].pressed ? 1 : 0;
        inputState.pressKeys['KeyX'] = !inputState.keys['KeyX'] && gamepads[0].buttons[3].pressed ? 1 : 0;
        inputState.pressKeys['KeyY'] = !inputState.keys['KeyY'] && gamepads[0].buttons[2].pressed ? 1 : 0;
        inputState.pressKeys['ArrowUp'] = !inputState.keys['ArrowUp'] && gamepads[0].buttons[12].pressed ? 1 : 0;
        inputState.pressKeys['ArrowDown'] = !inputState.keys['ArrowDown'] && gamepads[0].buttons[13].pressed ? 1 : 0;
        inputState.pressKeys['ArrowLeft'] = !inputState.keys['ArrowLeft'] && gamepads[0].buttons[14].pressed ? 1 : 0;
        inputState.pressKeys['ArrowRight'] = !inputState.keys['ArrowRight'] && gamepads[0].buttons[15].pressed ? 1 : 0;
        
        inputState.keys['KeyA'] = gamepads[0].buttons[1].pressed;
        inputState.keys['KeyB'] = gamepads[0].buttons[0].pressed;
        inputState.keys['KeyX'] = gamepads[0].buttons[3].pressed;
        inputState.keys['KeyY'] = gamepads[0].buttons[2].pressed;
        inputState.keys['ArrowUp'] = gamepads[0].buttons[12].pressed;
        inputState.keys['ArrowDown'] = gamepads[0].buttons[13].pressed;
        inputState.keys['ArrowLeft'] = gamepads[0].buttons[14].pressed;
        inputState.keys['ArrowRight'] = gamepads[0].buttons[15].pressed;
        
        inputState.axes = [gamepads[0].axes[0], gamepads[0].axes[1], gamepads[0].axes[2], gamepads[0].axes[3]];
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function game_loop() {
    
    function sortObjectsByY() {
        if (!Game.allObject || !Array.isArray(Game.allObject)) {
            return [];
        }

        const sortedObjects = [...Game.allObject];
        sortedObjects.sort((a, b) => {
            const aSum = (Number(a.y) || 0) + (Number(a.zIndex) || 0);
            const bSum = (Number(b.y) || 0) + (Number(b.zIndex) || 0);
            return aSum - bSum;
        });

        return sortedObjects;
    }
    
    requestAnimationFrame(game_loop);
    
    if (Game.gameLoop) {
        if(typeof objectsDebugPanel !== 'undefined')
            objectsDebugPanel.update();
        
        Game.updateGamepadKey();
        Game.gameLoop();
        
        Object.keys(inputState.keys).forEach(key => {
            inputState.pressKeys[key] = 0;
        });
        
        var now = Date.now();
        for (var i = 0; i < game_helper_timers.length; i++) {
            if (now >= game_helper_timers[i].targetTime) {
                game_helper_timers[i].callback(); 
                game_helper_timers.splice(i, 1);  
                i--;                  
            }
        }
        
        for (var i = 0; i < Game.allObject.length; i++) {
            var o = Game.allObject[i];
            if (o.isStatic == 0) {
                o.speedy += gravitation;
            }
            o.x += o.speedx;
            o.y += o.speedy;
            o.isOnGround = 0;
            
            for (var j = i + 1; j < Game.allObject.length; j++) {
                var b = Game.allObject[j];
                if (o.solid && b.solid) {
                    const resolution = Game.checkCollision(o, b);
                    if (resolution.collides) {
                        Game.resolveCollision(o, b, resolution);
                        if (o.onCollision) o.onCollision(b);
                        if (b.onCollision) b.onCollision(o);
                    }
                }
            }
        }
        
        const sortedArray = sortObjectsByY();
        for (var i = 0; i < sortedArray.length; i++) {
            var o = sortedArray[i];
            if (o.visible) {
                ctx.save();
                ctx.translate(o.x + o.width / 2 - Game.screenx, o.y + o.height / 2 - Game.screeny);
                ctx.rotate(o.angle * Math.PI / 180);

                const SDL_FLIP_NONE = 0x00000000;
                const SDL_FLIP_HORIZONTAL = 0x00000001;
                const SDL_FLIP_VERTICAL = 0x00000002;
                const flipHorz = (o.flip & SDL_FLIP_HORIZONTAL) !== 0;
                const flipVert = (o.flip & SDL_FLIP_VERTICAL) !== 0;

                if (flipHorz || flipVert) {
                    const scaleX = flipHorz ? -1 : 1;
                    const scaleY = flipVert ? -1 : 1;
                    const offsetX = flipHorz ? o.width / 2 : -o.width / 2;
                    const offsetY = flipVert ? o.height / 2 : -o.height / 2;

                    ctx.scale(scaleX, scaleY);
                    Draw.image(o.sprite, offsetX, offsetY, o.width, o.height);
                } else {
                    Draw.image(o.sprite, -o.width / 2, -o.height / 2, o.width, o.height);
                }
				
				if (draw_bounding_box){
					ctx.save();
                    ctx.strokeStyle = '#0ff';
                    ctx.lineWidth = 2;                
                    ctx.beginPath();
                    ctx.rect(-o.width / 2, -o.height / 2, o.width, o.height);
                    ctx.stroke();
                    ctx.restore();
				}
                // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–µ–ª–µ–Ω–æ–π —Ä–∞–º–∫–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                if (debugShowExpandedObjectsBorder && objectsDebugPanel && 
                    objectsDebugPanel.isObjectExpanded(o)) {
                    ctx.save();
                    ctx.strokeStyle = '#0f0';
                    ctx.lineWidth = 2;     
                    ctx.beginPath();
                    ctx.rect(-o.width / 2, -o.height / 2, o.width, o.height);
                    ctx.stroke();             
                    ctx.fillStyle = '#0f0';
                    ctx.font = '12px Arial';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(o.name || 'Unnamed', 0, 0);
                    ctx.restore();
                }

                ctx.restore();
                
                if(o.onStep)
                    o.onStep();
            }
        }
        
        if (Game.enableTouchInput) {
            Game.updateSensorKey();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
Game.init();
game_loop();

function initObjectsDebugPanel() {
    const container = document.getElementById('objectsList');
    if (!container) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç —Å id="objectsList" –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    container.style.overflowY = 'auto';
    container.style.backgroundColor = 'rgba(40, 40, 40, 0.9)';
    container.style.color = '#e0e0e0';
    container.style.fontFamily = 'monospace';
    container.style.fontSize = '13px';
	container.style.width = 0;
	container.style.opacity = 0;

    const expandedStates = new Map();
    const objectElements = new Map();
    let lastObjectCount = 0;

    // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã
    const PARAM_TRANSLATIONS = {
        'x': Blockly.Msg['OBJECT_PARAM_X'],
        'y': Blockly.Msg['OBJECT_PARAM_Y'],
        'width': Blockly.Msg['OBJECT_PARAM_WIDTH'],
        'height': Blockly.Msg['OBJECT_PARAM_HEIGHT'],
        'speedx': Blockly.Msg['OBJECT_PARAM_SPEEDX'],
        'speedy': Blockly.Msg['OBJECT_PARAM_SPEEDY'],
        'visible': Blockly.Msg['OBJECT_PARAM_VISIBLE'],
        'name': Blockly.Msg['OBJECT_PARAM_NAME'],
        'solid': Blockly.Msg['OBJECT_PARAM_SOLID'],
        'angle': Blockly.Msg['OBJECT_PARAM_ANGLE'],
        'flip': Blockly.Msg['OBJECT_PARAM_FLIP'],
        'mass': Blockly.Msg['OBJECT_PARAM_MASS'],
        'restitution': Blockly.Msg['OBJECT_PARAM_RESTITUTION'],
        'isStatic': Blockly.Msg['OBJECT_PARAM_ISSTATIC'],
        'zIndex': Blockly.Msg['OBJECT_PARAM_ZINDEX'],
        'isOnGround': Blockly.Msg['OBJECT_PARAM_ISONGROUND']
    };

    function getObjectId(obj, index) {
        return obj.__debugId || (obj.__debugId = `obj_${index}_${Math.random().toString(36).substr(2, 6)}`);
    }

    function createObjectElement(obj, id) {
        const element = document.createElement('div');
        element.className = 'debug-object';
        element.dataset.objId = id;
        element.style.marginBottom = '8px';
        element.style.border = '1px solid #444';
        element.style.overflow = 'hidden';

        const isExpanded = expandedStates.get(id) || false;

        const header = document.createElement('div');
        header.className = 'debug-object-header';
        header.style.padding = '6px 8px';
        header.style.background = '#333';
        header.style.display = 'flex';
        header.style.justifyContent = 'space-between';
        header.style.alignItems = 'center';
        header.style.cursor = 'pointer';
        header.style.userSelect = 'none';

        const nameSpan = document.createElement('span');
        nameSpan.style.color = '#6af';
        nameSpan.textContent = obj.name || `Object ${id.split('_')[1]}`;

        const arrowSpan = document.createElement('span');
        arrowSpan.className = 'debug-object-arrow';
        arrowSpan.style.fontSize = '10px';
        arrowSpan.textContent = isExpanded ? '‚ñº' : '‚ñ∂';

        header.appendChild(nameSpan);
        header.appendChild(arrowSpan);

        const details = document.createElement('div');
        details.className = 'debug-object-details';
        details.style.display = isExpanded ? 'block' : 'none';
        details.style.padding = '8px';
        details.style.background = '#2a2a2a';
        details.style.borderTop = '1px solid #444';

        updateObjectDetails(details, obj);

        element.appendChild(header);
        element.appendChild(details);

        header.addEventListener('click', (e) => {
            const newState = !isExpanded;
            details.style.display = newState ? 'block' : 'none';
            arrowSpan.textContent = newState ? '‚ñº' : '‚ñ∂';
            expandedStates.set(id, newState);
            e.stopPropagation();
        });

        return element;
    }

    function updateObjectDetails(detailsElement, obj) {
        detailsElement.innerHTML = Object.entries(obj)
            .filter(([key]) => typeof obj[key] !== 'function')
            .map(([key, value]) => {
                let valueStr;
                try {
                    valueStr = typeof value === 'object' ? JSON.stringify(value) : String(value);
                } catch {
                    valueStr = '[Complex Data]';
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ PARAM_TRANSLATIONS –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                const displayName = PARAM_TRANSLATIONS[key] || key;

                return `
                    <div style="display: flex; margin-bottom: 4px; line-height: 1.3;">
                        <span style="color: #aaf; min-width: 120px;">${displayName}:</span>
                        <span style="
                            ${typeof value === 'number' ? 'color: #8f8;' : ''}
                            ${typeof value === 'boolean' ? `color: ${value ? '#8f8' : '#f88'};` : ''}
                            ${typeof value === 'string' ? 'color: #f8f;' : ''}
                            ${value === null ? 'color: #888;' : ''}
                            word-break: break-all;
                        ">
                            ${valueStr}
                        </span>
                    </div>
                `;
            })
            .join('');
    }

    function updateObjectsList() {
        if (!Game.allObject) return;
		if (!Game.helper.debug) return;

        const currentObjects = Game.allObject;
        const currentCount = currentObjects.length;

        if (currentCount === lastObjectCount) {
            currentObjects.forEach((obj, index) => {
                const id = getObjectId(obj, index);
                const element = objectElements.get(id);
                if (element) {
                    const nameSpan = element.querySelector('.debug-object-header span:first-child');
                    if (nameSpan) nameSpan.textContent = obj.name || `Object ${index}`;
                    
                    const details = element.querySelector('.debug-object-details');
                    if (details && details.style.display !== 'none') {
                        updateObjectDetails(details, obj);
                    }
                }
            });
            return;
        }

        objectElements.forEach((element, id) => {
            const details = element.querySelector('.debug-object-details');
            if (details) {
                expandedStates.set(id, details.style.display !== 'none');
            }
        });

        container.innerHTML = '';
        objectElements.clear();

        const title = document.createElement('div');
        title.textContent = `Objects (${currentCount})`;
        title.style.marginBottom = '15px';
        title.style.fontWeight = 'bold';
        title.style.borderBottom = '1px solid #555';
        title.style.paddingBottom = '5px';
        container.appendChild(title);

        currentObjects.forEach((obj, index) => {
            const id = getObjectId(obj, index);
            const element = createObjectElement(obj, id);
            container.appendChild(element);
            objectElements.set(id, element);
        });

        lastObjectCount = currentCount;
    }

    function isObjectExpanded(obj) {
        const id = obj.__debugId;
        return id ? expandedStates.get(id) : false;
    }
	
	Game.helper.debug = false;
    updateObjectsList();

    return {
        update: updateObjectsList,
        isObjectExpanded: isObjectExpanded,
        getExpandedStates: () => expandedStates,
        getObjectElements: () => objectElements
    };
}

const objectsDebugPanel = initObjectsDebugPanel();